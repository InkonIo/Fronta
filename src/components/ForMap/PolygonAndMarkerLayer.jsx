// components/ForMap/PolygonAndMarkerLayer.jsx
import React from 'react';
import { Polygon, Marker, Tooltip } from 'react-leaflet';
import MarkerClusterGroup from 'react-leaflet-markercluster';
import * as L from 'leaflet';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É–ª—å—Ç—É—Ä—ã –∏–∑ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const extractCropBase = (combinedString) => {
  if (!combinedString) return '';
  const lastParenIndex = combinedString.lastIndexOf('(');
  if (lastParenIndex !== -1 && combinedString.endsWith(')')) {
    return combinedString.substring(0, lastParenIndex).trim();
  }
  return combinedString.trim();
};

export default function PolygonAndMarkerLayer({ polygons, zoom, calculateArea, formatArea, isDrawing, isEditingMode, selectedPolygon }) {
  return (
    <>
      {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª–∏–≥–æ–Ω—ã */}
      {polygons.map((polygon) => {
        if (!polygon.coordinates || polygon.coordinates.length < 3) {
          console.warn(`–ü–æ–ª–∏–≥–æ–Ω ${polygon.id} –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω.`);
          return null;
        }

        return (
          <Polygon
            key={polygon.id}
            positions={polygon.coordinates} // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–∏–≥–æ–Ω–∞
            color={polygon.color || 'blue'} // –¶–≤–µ—Ç –æ–±–≤–æ–¥–∫–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
            fillColor={polygon.color || 'blue'} // –¶–≤–µ—Ç –∑–∞–ª–∏–≤–∫–∏
            fillOpacity={0.4} // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∑–∞–ª–∏–≤–∫–∏
            weight={2} // –¢–æ–ª—â–∏–Ω–∞ –æ–±–≤–æ–¥–∫–∏
            opacity={0.8} // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –æ–±–≤–æ–¥–∫–∏
            onClick={() => {
              if (!isDrawing && !isEditingMode) { 
                // setSelectedPolygon(polygon.id); // –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–ª–∏–≥–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –Ω–µ–≥–æ
              }
            }}
          >
            {/* –¢—É–ª—Ç–∏–ø –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ —Å–∞–º –ø–æ–ª–∏–≥–æ–Ω */}
            <Tooltip direction="center" offset={[0, 0]} opacity={0.9} permanent={false}>
              <div style={{ fontWeight: 'bold' }}>{polygon.name || '–ü–æ–ª–∏–≥–æ–Ω'}</div>
              {polygon.crop && <div>–ö—É–ª—å—Ç—É—Ä–∞: {polygon.crop}</div>}
              <div>–ü–ª–æ—â–∞–¥—å: {formatArea(calculateArea(polygon.coordinates))}</div>
            </Tooltip>
          </Polygon>
        );
      })}

      {/* –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ */}
      <MarkerClusterGroup chunkedLoading>
        {polygons.map((polygon) => {
          if (!polygon.coordinates || polygon.coordinates.length < 3) return null;

          const latLngs = polygon.coordinates.map(c => L.latLng(c[0], c[1]));
          const bounds = L.latLngBounds(latLngs);
          const center = bounds.isValid() ? bounds.getCenter() : null;

          if (!center) return null;

          // –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑—É–º–∞
          let iconHtml = '';
          let iconSize = [24, 24]; // –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
          let iconAnchor = [12, 12]; // –ë–∞–∑–æ–≤–∞—è –ø—Ä–∏–≤—è–∑–∫–∞
          let backgroundColor = 'rgba(255,255,255,0.8)'; 

          // –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è MarkerClusterGroup –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å "–∫–æ–º–ø–∞–Ω–æ–≤–∫—É" –º–∞—Ä–∫–µ—Ä–æ–≤
          // –ü—Ä–∏ –Ω–∏–∑–∫–æ–º –∑—É–º–µ –æ–Ω–∞ –ø–æ–∫–∞–∂–µ—Ç —á–∏—Å–ª–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ, –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã.
          if (zoom < 9) { // –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –∑—É–º: –Ω–µ–±–æ–ª—å—à–∞—è –∏–∫–æ–Ω–∫–∞
              iconHtml = 'üåç'; 
              iconSize = [30, 30];
              iconAnchor = [15, 15];
          } else if (zoom >= 9 && zoom < 13) { // –°—Ä–µ–¥–Ω–∏–π –∑—É–º: –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–π –ø–∏–Ω
              iconHtml = 'üìç'; 
              iconSize = [24, 24];
              iconAnchor = [12, 12];
          } else { // –í—ã—Å–æ–∫–∏–π –∑—É–º: –Ω–µ–±–æ–ª—å—à–æ–π, –≤–æ–∑–º–æ–∂–Ω–æ, –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–º–æ–¥–∑–∏
              iconHtml = '‚ú®'; 
              iconSize = [20, 20];
              iconAnchor = [10, 10];
          }

          const customIcon = L.divIcon({
            className: 'custom-polygon-marker', 
            html: `<div style="text-align: center; font-size: ${iconSize[0] * 0.7}px; background-color: ${backgroundColor}; border-radius: 50%; width: ${iconSize[0]}px; height: ${iconSize[1]}px; display: flex; justify-content: center; align-items: center; box-shadow: 0 2px 5px rgba(0,0,0,0.2);">${iconHtml}</div>`,
            iconSize: iconSize,
            iconAnchor: iconAnchor,
          });

          return (
            <Marker position={center} icon={customIcon} key={`marker-${polygon.id}`}>
              {/* –¢—É–ª—Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ä */}
              <Tooltip>
                  <div><strong>{polygon.name || '–ü–æ–ª–∏–≥–æ–Ω'}</strong></div>
                  {polygon.crop && <div>–ö—É–ª—å—Ç—É—Ä–∞: {polygon.crop}</div>}
                  <div>–ü–ª–æ—â–∞–¥—å: {formatArea(calculateArea(polygon.coordinates))}</div>
              </Tooltip>
            </Marker>
          );
        })}
      </MarkerClusterGroup>
    </>
  );
}
