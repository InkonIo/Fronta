// components/ForMap/MapSidebar.jsx
import React, { useState, useEffect, useRef } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import './MapSidebar.css'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π CSS –¥–ª—è MapSidebar

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞/–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É–ª—å—Ç—É—Ä—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ---

// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã –∏–∑ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const extractCropBase = (combinedString) => {
  if (!combinedString) return '';
  const lastParenIndex = combinedString.lastIndexOf('(');
  if (lastParenIndex !== -1 && combinedString.endsWith(')')) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –≤ –∫–æ–Ω—Ü–µ
    return combinedString.substring(0, lastParenIndex).trim();
  }
  return combinedString.trim(); // –ï—Å–ª–∏ –Ω–µ—Ç —Å–∫–æ–±–æ–∫ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥—Ä—É–≥–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É
};

// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const extractCropComment = (combinedString) => {
  if (!combinedString) return '';
  const lastParenIndex = combinedString.lastIndexOf('(');
  const lastCloseParenIndex = combinedString.lastIndexOf(')');
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫–æ–±–∫–∏ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è –∏–¥–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π, –∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
  if (lastParenIndex !== -1 && lastCloseParenIndex === combinedString.length - 1 && lastCloseParenIndex > lastParenIndex) {
    return combinedString.substring(lastParenIndex + 1, lastCloseParenIndex).trim();
  }
  return ''; // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
};

// –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
const combineCropAndComment = (cropBase, comment) => {
  const base = cropBase ? cropBase.trim() : '';
  const comm = comment ? comment.trim() : '';

  if (base && comm) {
    return `${base} (${comm})`;
  }
  if (base) {
    return base;
  }
  return comm; 
};


export default function MapSidebar({
  polygons,               // –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
  selectedPolygon,        // ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞ (–¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è)
  setSelectedPolygon,     // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞
  deletePolygon,          // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞
  handleEditPolygon,      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—ã –ø–æ–ª–∏–≥–æ–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
  crops,                  // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä
  loadingCrops,           // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∫—É–ª—å—Ç—É—Ä (–∫—É–ª—å—Ç—É—Ä)
  cropsError,             // –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É–ª—å—Ç—É—Ä
  fetchCropsFromAPI,      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É–ª—å—Ç—É—Ä
  clearAllCrops,          // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∫—É–ª—å—Ç—É—Ä —Å –ø–æ–ª–∏–≥–æ–Ω–æ–≤
  updatePolygonCrop,      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É–ª—å—Ç—É—Ä—ã –ø–æ–ª–∏–≥–æ–Ω–∞
  calculateArea,          // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
  formatArea,             // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–æ—â–∞–¥–∏
  startDrawing,           // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–∂–∏–º–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
  stopDrawing,            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
  handleStopAndSaveEdit,  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  isDrawing,              // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
  isEditingMode,          // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –Ω–∞ –∫–∞—Ä—Ç–µ)
  clearAll,               // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ (—Ç–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
  handleLogout,           // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è –∏–∑ App.js
  showMyPolygons,         // –í–æ–∑–≤—Ä–∞—â–∞–µ–º showMyPolygons –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ–ª–∏–≥–æ–Ω—ã"
  updatePolygonName,      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª–∏–≥–æ–Ω–∞ (–∏–Ω–ª–∞–π–Ω)
  isSavingPolygon,        // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –∏–¥–µ—Ç –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞
  isFetchingPolygons,     // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –∏–¥–µ—Ç –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–∏–≥–æ–Ω–æ–≤
  showCropsSection,       // –ù–û–í–´–ô –ü–†–û–ü: –§–ª–∞–≥ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ–∫—Ü–∏–∏ –∫—É–ª—å—Ç—É—Ä
  savePolygonToDatabase,  // –ù–û–í–´–ô –ü–†–û–ü: –ü–µ—Ä–µ–¥–∞–Ω –∏–∑ PolygonDrawMap –¥–ª—è onBlur —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
}) {
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ MapSidebar
  console.log('MapSidebar render. isDrawing:', isDrawing, 'isEditingMode:', isEditingMode, 'isSavingPolygon:', isSavingPolygon, 'isFetchingPolygons:', isFetchingPolygons);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–∏–º –º–µ–Ω—é (–±—É—Ä–≥–µ—Ä-–º–µ–Ω—é)
  const [isBurgerMenuOpen, setIsBurgerMenuOpen] = useState(false);
  const [activeSection, setActiveSection] = useState('map'); // –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –º–µ–Ω—é
  const [showPolygonsList, setShowPolygonsList] = useState(true); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è/–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª–∏–≥–æ–Ω–æ–≤

  const navigate = useNavigate();
  const location = useLocation();

  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ URL
  useEffect(() => {
    if (location.pathname === '/') setActiveSection('home');
    else if (location.pathname === '/dashboard') setActiveSection('map');
    else if (location.pathname === '/chat') setActiveSection('ai-chat');
    else if (location.pathname === '/earthdata') setActiveSection('soil-data');
    else setActiveSection('');
  }, [location.pathname]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–∑ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
  const handleNavigate = (path, section) => {
    setIsBurgerMenuOpen(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    setActiveSection(section);
    navigate(path);
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
  const toggleBurgerMenu = () => {
    setIsBurgerMenuOpen(prev => !prev);
  };

  // –°—Ç–∏–ª–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ MapSidebar
  const sidebarStyle = {
    width: '30%',
    minWidth: '300px', // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    height: '100vh',
    overflowY: 'auto',
    padding: '15px',
    backgroundColor: '#f8f9fa',
    borderLeft: '1px solid #dee2e6',
    fontFamily: 'Arial, sans-serif',
    display: 'flex',
    flexDirection: 'column',
    gap: '20px', // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏
    position: 'relative', // –í–∞–∂–Ω–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é
  };

  // –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const buttonStyle = {
    padding: '8px 12px',
    margin: '5px 0', // –û—Ç—Å—Ç—É–ø—ã —Å–≤–µ—Ä—Ö—É/—Å–Ω–∏–∑—É
    borderRadius: '5px',
    border: '1px solid #ccc',
    cursor: 'pointer',
    fontSize: '14px',
    width: '100%',
    boxSizing: 'border-box',
    transition: 'background-color 0.2s ease, transform 0.1s ease',
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ–ª–∂–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å" –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π
  const isSaveButtonActive = isDrawing || isEditingMode;

  return (
    <div style={sidebarStyle}>
      {/* –ö–Ω–æ–ø–∫–∞ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é –≤–Ω—É—Ç—Ä–∏ MapSidebar */}
      <button className="burger-menu-icon" onClick={toggleBurgerMenu} aria-label="–û—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é">
        {isBurgerMenuOpen ? '‚úï' : '‚ò∞'} 
      </button>

      {/* –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é */}
      {isBurgerMenuOpen && (
        <div className="map-sidebar-dropdown-menu"> 
          <a
            href="#"
            onClick={e => { e.preventDefault(); handleNavigate('/', 'home'); }}
            className={`map-menu-item ${activeSection === 'home' ? 'active' : ''}`}
          >
            üè† –ì–ª–∞–≤–Ω–∞—è
          </a>
          <a
            href="#"
            onClick={e => { e.preventDefault(); handleNavigate('/dashboard', 'map'); }}
            className={`map-menu-item ${activeSection === 'map' ? 'active' : ''}`}
          >
            üó∫Ô∏è –ö–∞—Ä—Ç–∞
          </a>
          <a
            href="#"
            onClick={e => { e.preventDefault(); handleNavigate('/chat', 'ai-chat'); }}
            className={`map-menu-item ${activeSection === 'ai-chat' ? 'active' : ''}`}
          >
            ü§ñ –ò–ò-—á–∞—Ç
          </a>
          <a
            href="#"
            onClick={e => { e.preventDefault(); handleNavigate('/earthdata', 'soil-data'); }}
            className={`map-menu-item ${activeSection === 'soil-data' ? 'active' : ''}`}
          >
            üå± –î–∞–Ω–Ω—ã–µ –ø–æ—á–≤—ã
          </a>
          
          <button onClick={handleLogout} className="map-menu-item map-logout">
            üö™ –í—ã–π—Ç–∏
          </button>
        </div>
      )}

      <h2 style={{ color: '#333', marginBottom: '10px' }}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ–π</h2>
      <hr style={{ border: 'none', height: '1px', background: '#ccc', margin: '0' }} />

      <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>
        <button
          onClick={startDrawing}
          disabled={isDrawing || isEditingMode || isSavingPolygon || isFetchingPolygons}
          style={{ ...buttonStyle, 
            backgroundColor: (isDrawing || isEditingMode || isSavingPolygon || isFetchingPolygons) ? '#b3e0ff' : '#4CAF50', 
            color: 'white' 
          }}
        >
          {isDrawing ? '‚úèÔ∏è –†–∏—Å—É—é...' : '‚úèÔ∏è –ù–∞—á–∞—Ç—å —Ä–∏—Å–æ–≤–∞–Ω–∏–µ'}
        </button>

        <button
          onClick={handleStopAndSaveEdit} 
          disabled={!isSaveButtonActive || isSavingPolygon || isFetchingPolygons}
          style={{ ...buttonStyle, 
            backgroundColor: isSaveButtonActive ? '#ff9800' : '#f0f0f0', 
            color: isSaveButtonActive ? 'white' : '#666' 
          }}
        >
          {isSavingPolygon ? 'üíæ –°–æ—Ö—Ä–∞–Ω—è—é...' : (isEditingMode ? 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : 'üíæ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å')}
        </button>

        <button
          onClick={clearAll} 
          disabled={isSavingPolygon || isFetchingPolygons || polygons.length === 0}
          style={{ ...buttonStyle, 
            backgroundColor: (isSavingPolygon || isFetchingPolygons || polygons.length === 0) ? '#cccccc' : '#f44336', 
            color: 'white' 
          }}
        >
          üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–ª–∏–≥–æ–Ω—ã
        </button>
        
        {/* –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –°–∫—Ä—ã—Ç—å/–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ */}
        <button
          onClick={() => {
            if (!showPolygonsList) { // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–∫—Ä—ã—Ç, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞
              showMyPolygons(); // –≠—Ç–æ –æ–±–Ω–æ–≤–∏—Ç polygons –∏–∑ API, –∏ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–µ—Ç –≤–∏–¥–µ–Ω
            }
            setShowPolygonsList(prev => !prev);
          }}
          disabled={isSavingPolygon || isFetchingPolygons || isDrawing || isEditingMode}
          style={{
            ...buttonStyle,
            backgroundColor: showPolygonsList ? '#6c757d' : '#007bff', 
            color: 'white',
            marginTop: '15px', 
          }}
        >
          {isFetchingPolygons ? 'üìÇ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫...' : (showPolygonsList ? 'üôà –°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª–∏–≥–æ–Ω–æ–≤' : 'üëÄ –ü–æ–∫–∞–∑–∞—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–∏–≥–æ–Ω—ã')}
        </button>
      </div>

      <hr style={{ border: 'none', height: '1px', background: '#ccc', margin: '0' }} />

      {showPolygonsList && polygons.length > 0 && (
        <div style={{ marginTop: '10px' }}>
          <h3 style={{ margin: '0 0 15px 0', color: '#333', fontSize: '18px' }}>
            üìê –ü–æ–ª–∏–≥–æ–Ω—ã ({polygons.length})
          </h3>
          <div style={{ maxHeight: '25vh', overflowY: 'auto', border: '1px solid #e0e0e0', borderRadius: '8px', padding: '10px' }}>
            {polygons.map((polygon, idx) => (
              <div
                key={polygon.id}
                style={{
                  marginBottom: '12px',
                  padding: '10px',
                  backgroundColor: selectedPolygon === polygon.id ? '#e3f2fd' : '#fff',
                  border: selectedPolygon === polygon.id ? '2px solid #2196f3' : '1px solid #e0e0e0',
                  borderRadius: '6px',
                  cursor: 'pointer',
                  boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
                }}
                onClick={() => setSelectedPolygon(polygon.id)}
              >
                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px', marginBottom: '8px' }}>
                  {/* –ò–Ω–ª–∞–π–Ω-—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª–∏–≥–æ–Ω–∞ */}
                  {selectedPolygon === polygon.id ? (
                    <input
                      type="text"
                      value={polygon.name || ''} 
                      onChange={(e) => {
                        e.stopPropagation();
                        updatePolygonName(polygon.id, e.target.value); 
                      }}
                      onBlur={(e) => {
                        e.stopPropagation();
                        const updatedPoly = polygons.find(p => p.id === polygon.id);
                        if (updatedPoly && updatedPoly.name !== (e.target.value || '').trim()) { 
                           const polyToSave = { ...updatedPoly, name: (e.target.value || '').trim() }; 
                           savePolygonToDatabase(polyToSave, true); 
                        }
                      }}
                      onClick={(e) => e.stopPropagation()} 
                      style={{
                        padding: '4px',
                        border: '1px solid #ccc',
                        borderRadius: '4px',
                        fontSize: '14px',
                        width: '100%',
                        boxSizing: 'border-box',
                        color: '#000', 
                        backgroundColor: '#f8f8f8' 
                      }}
                      disabled={isSavingPolygon || isFetchingPolygons}
                    />
                  ) : (
                    <strong style={{ color: '#333', fontSize: '14px' }}>
                      {polygon.name || `–ü–æ–ª–∏–≥–æ–Ω #${idx + 1}`} 
                    </strong>
                  )}

                  <div style={{ display: 'flex', gap: '8px', justifyContent: 'flex-end' }}>
                    <button
                      onClick={(e) => { e.stopPropagation(); deletePolygon(polygon.id); }}
                      style={{ padding: '4px 8px', backgroundColor: '#f44336', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer', fontSize: '11px' }}
                      disabled={isSavingPolygon || isFetchingPolygons}
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                    <button
                      onClick={(e) => { e.stopPropagation(); handleEditPolygon(polygon.id); }}
                      disabled={isEditingMode || isDrawing || isSavingPolygon || isFetchingPolygons}
                      style={{ 
                        padding: '4px 8px', 
                        backgroundColor: (isEditingMode || isDrawing || isSavingPolygon || isFetchingPolygons) ? '#cccccc' : '#ffc107', 
                        color: (isEditingMode || isDrawing || isFetchingPolygons) ? '#666666' : '#000', 
                        border: 'none', 
                        borderRadius: '4px', 
                        cursor: (isEditingMode || isDrawing || isSavingPolygon || isFetchingPolygons) ? 'not-allowed' : 'pointer', 
                        fontSize: '11px' 
                      }}
                    >
                      ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–æ—Ä–º—É
                    </button>
                  </div>
                </div>
                <div 
                  style={{ 
                    fontSize: '12px', 
                    color: '#444', 
                    marginBottom: '8px' 
                  }}
                >
                  <div style={{ display: 'flex', gap: '15px', flexWrap: 'wrap', alignItems: 'center' }}>
                    <span>–¢–æ—á–µ–∫: {polygon.coordinates.length}</span>
                    <span>–ü–ª–æ—â–∞–¥—å: {formatArea(calculateArea(polygon.coordinates))}</span>
                    <div style={{ width: '18px', height: '18px', backgroundColor: polygon.color, borderRadius: '4px', border: '1px solid #ddd' }}></div>
                  </div>
                </div>
                {/* –ò–Ω–ª–∞–π–Ω-—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã –ø–æ–ª–∏–≥–æ–Ω–∞ */}
                {selectedPolygon === polygon.id && (
                  <div style={{ marginTop: '8px', display: 'flex', flexDirection: 'column', gap: '8px' }}>
                    <div>
                      <label htmlFor={`crop-select-${polygon.id}`} style={{ display: 'block', marginBottom: '5px', fontSize: '12px', color: '#555' }}>
                        –ö—É–ª—å—Ç—É—Ä–∞:
                      </label>
                      <select
                        id={`crop-select-${polygon.id}`}
                        value={extractCropBase(polygon.crop) || ''}
                        onChange={(e) => {
                          e.stopPropagation();
                          const newCropBase = e.target.value;
                          const currentComment = extractCropComment(polygon.crop);
                          const newCombinedCrop = combineCropAndComment(newCropBase, currentComment);
                          updatePolygonCrop(polygon.id, newCombinedCrop);
                        }}
                        onBlur={(e) => {
                          e.stopPropagation();
                          const originalPoly = polygons.find(p => p.id === polygon.id);
                          const newCropBase = e.target.value;
                          const currentComment = extractCropComment(originalPoly.crop); 
                          const newCombinedCrop = combineCropAndComment(newCropBase, currentComment);
                          
                          if (originalPoly && originalPoly.crop !== newCombinedCrop) { 
                              savePolygonToDatabase({ ...originalPoly, crop: newCombinedCrop }, true); 
                          }
                        }}
                        disabled={isSavingPolygon || isFetchingPolygons}
                        style={{ 
                          padding: '4px 8px', 
                          border: '1px solid #ced4da', 
                          borderRadius: '4px', 
                          backgroundColor: (isSavingPolygon || isFetchingPolygons) ? '#e0e0e0' : '#fff', 
                          fontSize: '11px', 
                          cursor: (isSavingPolygon || isFetchingPolygons) ? 'not-allowed' : 'pointer', 
                          flex: 1, 
                          minWidth: '120px',
                          color: '#333'
                        }}
                      >
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É</option>
                        {crops.map((crop) => (
                          <option key={crop} value={crop} style={{ color: '#333' }}>
                            {crop}
                          </option>
                        ))}
                      </select>
                    </div>
                    <div>
                      <label htmlFor={`crop-comment-${polygon.id}`} style={{ display: 'block', marginBottom: '5px', fontSize: '12px', color: '#555' }}>
                        –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
                      </label>
                      <input
                        id={`crop-comment-${polygon.id}`}
                        type="text"
                        placeholder="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
                        value={extractCropComment(polygon.crop) || ''}
                        onChange={(e) => {
                          e.stopPropagation();
                          const currentCropBase = extractCropBase(polygon.crop);
                          const newComment = e.target.value;
                          const newCombinedCrop = combineCropAndComment(currentCropBase, newComment);
                          updatePolygonCrop(polygon.id, newCombinedCrop);
                        }}
                        onBlur={(e) => {
                          e.stopPropagation();
                          const originalPoly = polygons.find(p => p.id === polygon.id);
                          const currentCropBase = extractCropBase(originalPoly.crop); 
                          const newComment = e.target.value;
                          const newCombinedCrop = combineCropAndComment(currentCropBase, newComment);
                          
                          if (originalPoly && originalPoly.crop !== newCombinedCrop) { 
                              savePolygonToDatabase({ ...originalPoly, crop: newCombinedCrop }, true); 
                          }
                        }}
                        disabled={isSavingPolygon || isFetchingPolygons}
                        style={{
                          padding: '4px 8px',
                          border: '1px solid #ced4da',
                          borderRadius: '4px',
                          backgroundColor: 'white', 
                          fontSize: '11px',
                          cursor: (isSavingPolygon || isFetchingPolygons) ? 'not-allowed' : 'pointer',
                          width: '100%',
                          boxSizing: 'border-box',
                          color: '#000', 
                          opacity: 1 
                        }}
                      />
                    </div>
                  </div>
                )}
                {polygon.crop && selectedPolygon !== polygon.id && (
                  <div 
                    style={{ 
                      fontSize: '12px', 
                      color: '#2e7d32', 
                      fontWeight: 'bold', 
                      backgroundColor: '#e8f5e8', 
                      padding: '5px 8px', 
                      borderRadius: '4px', 
                      marginTop: '8px', 
                      opacity: 1, 
                      display: 'block' 
                    }}
                  >
                    üåæ {polygon.crop}
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      )}

      {showCropsSection && (
        <div style={{ 
          backgroundColor: '#fff', 
          border: '1px solid #dee2e6', 
          borderRadius: '8px', 
          overflow: 'hidden', 
          boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
          marginTop: polygons.length > 0 ? '10px' : '0' 
        }}>
          <div style={{ backgroundColor: '#f8f9fa', padding: '12px', borderBottom: '1px solid #dee2e6', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <h4 style={{ margin: 0, color: '#333', fontSize: '16px' }}>
              üåæ –°–≤–æ–¥–∫–∞ –∫—É–ª—å—Ç—É—Ä
            </h4>
            <div style={{ display: 'flex', gap: '8px' }}>
              <button
                onClick={fetchCropsFromAPI}
                disabled={loadingCrops || isSavingPolygon || isFetchingPolygons}
                style={{ padding: '6px 10px', backgroundColor: (loadingCrops || isSavingPolygon || isFetchingPolygons) ? '#ccc' : '#17a2b8', color: 'white', border: 'none', borderRadius: '4px', cursor: (loadingCrops || isSavingPolygon || isFetchingPolygons) ? 'not-allowed' : 'pointer', fontSize: '11px' }}
              >
                {loadingCrops ? '–ó–∞–≥—Ä—É–∂–∞—é...' : 'üîÑ'}
              </button>
              <button
                onClick={clearAllCrops}
                disabled={isSavingPolygon || isFetchingPolygons}
                style={{ padding: '6px 10px', backgroundColor: (isSavingPolygon || isFetchingPolygons) ? '#cccccc' : '#dc3545', color: 'white', border: 'none', borderRadius: '4px', cursor: (isSavingPolygon || isFetchingPolygons) ? 'not-allowed' : 'pointer', fontSize: '11px' }}
              >
                üóëÔ∏è
              </button>
            </div>
          </div>

          {cropsError && (
            <div style={{ padding: '8px 12px', backgroundColor: '#f8d7da', color: '#721c24', fontSize: '11px' }}>
              ‚ö†Ô∏è {cropsError}
            </div>
          )}

          {/* –°–≤–æ–¥–∫–∞ */}
          <div style={{ marginTop: '15px', padding: '10px', backgroundColor: '#f8f9fa', borderRadius: '6px', border: '1px solid #e9ecef', fontSize: '11px' }}>
            <div style={{ marginBottom: '8px', fontWeight: 'bold' }}>–°–≤–æ–¥–∫–∞:</div>
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '5px' }}>
              <div>–ü–æ–ª–∏–≥–æ–Ω–æ–≤: {polygons.length}</div>
              <div>–° –∫—É–ª—å—Ç—É—Ä–∞–º–∏: {polygons.filter((p) => p.crop).length}</div>
              <div style={{ gridColumn: '1 / -1' }}>
                –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å:{' '}
                {formatArea(polygons.reduce((total, p) => total + calculateArea(p.coordinates), 0))}
              </div>
            </div>
            {polygons.some((p) => p.crop) && (
              <div style={{ marginTop: '10px' }}>
                <div style={{ fontWeight: 'bold', marginBottom: '5px' }}>–ü–æ –∫—É–ª—å—Ç—É—Ä–∞–º:</div>
                <div style={{ display: 'flex', flexWrap: 'wrap', gap: '4px' }}>
                  {Object.entries(
                    polygons.filter((p) => p.crop).reduce((acc, p) => {
                      const area = calculateArea(p.coordinates);
                      const baseCrop = extractCropBase(p.crop); 
                      if (baseCrop) {
                         acc[baseCrop] = (acc[baseCrop] || 0) + area;
                      }
                      return acc;
                    }, {})
                  ).map(([crop, area]) => (
                    <div key={crop} style={{ padding: '2px 6px', backgroundColor: '#e8f5e8', borderRadius: '3px', fontSize: '10px', color: '#2e7d32' }}>
                      {crop}: {formatArea(area)}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}
