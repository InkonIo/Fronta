// components/ForMap/MapSidebar.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import './MapSidebar.css'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π CSS –¥–ª—è MapSidebar

export default function MapSidebar({
  polygons,               // –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
  selectedPolygon,        // ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞ (–¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è)
  setSelectedPolygon,     // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞
  deletePolygon,          // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞
  handleEditPolygon,      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞
  crops,                  // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä
  loadingCrops,           // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∫—É–ª—å—Ç—É—Ä
  cropsError,             // –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É–ª—å—Ç—É—Ä
  fetchCropsFromAPI,      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É–ª—å—Ç—É—Ä
  clearAllCrops,          // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∫—É–ª—å—Ç—É—Ä —Å –ø–æ–ª–∏–≥–æ–Ω–æ–≤
  updatePolygonCrop,      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É–ª—å—Ç—É—Ä—ã –ø–æ–ª–∏–≥–æ–Ω–∞
  calculateArea,          // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
  formatArea,             // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–æ—â–∞–¥–∏
  startDrawing,           // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–∂–∏–º–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
  stopDrawing,            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
  stopAndSaveDrawing,     // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ä—É—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∏—Å–æ–≤–∞–Ω–∏—è)
  handleStopAndSaveEdit,  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  isDrawing,              // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
  isEditingMode,          // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  clearAll,               // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
  handleLogout,           // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è –∏–∑ App.js
  showMyPolygons          // –ù–û–í–´–ô –ü–†–û–ü: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ "–ú–æ–∏—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤"
}) {
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ MapSidebar
  console.log('MapSidebar rendering. isDrawing:', isDrawing, 'isEditingMode:', isEditingMode);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–∏–º –º–µ–Ω—é (–±—É—Ä–≥–µ—Ä-–º–µ–Ω—é)
  const [isBurgerMenuOpen, setIsBurgerMenuOpen] = useState(false);
  const [activeSection, setActiveSection] = useState('map'); // –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –º–µ–Ω—é

  const navigate = useNavigate();
  const location = useLocation();

  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ URL
  useEffect(() => {
    // –í —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ AppLayout —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –¢–û–õ–¨–ö–û –Ω–∞ /dashboard.
    // –ü–æ—ç—Ç–æ–º—É –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è –¥–ª—è MapSidebar –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç 'map' –∏–ª–∏ –¥—Ä—É–≥–∏–µ,
    // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∏—Ö –∏–∑ —ç—Ç–æ–≥–æ –º–µ–Ω—é.
    if (location.pathname === '/') setActiveSection('home');
    else if (location.pathname === '/dashboard') setActiveSection('map');
    else if (location.pathname === '/chat') setActiveSection('ai-chat');
    else if (location.pathname === '/earthdata') setActiveSection('soil-data');
    else setActiveSection('');
  }, [location.pathname]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–∑ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
  const handleNavigate = (path, section) => {
    setIsBurgerMenuOpen(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    setActiveSection(section);
    navigate(path);
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
  const toggleBurgerMenu = () => {
    setIsBurgerMenuOpen(prev => !prev);
  };

  // –°—Ç–∏–ª–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ MapSidebar
  const sidebarStyle = {
    width: '30%',
    minWidth: '300px', // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    height: '100vh',
    overflowY: 'auto',
    padding: '15px',
    backgroundColor: '#f8f9fa',
    borderLeft: '1px solid #dee2e6',
    fontFamily: 'Arial, sans-serif',
    display: 'flex',
    flexDirection: 'column',
    gap: '20px', // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏
    position: 'relative', // –í–∞–∂–Ω–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é
  };

  // –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const buttonStyle = {
    padding: '8px 12px',
    margin: '5px 0', // –û—Ç—Å—Ç—É–ø—ã —Å–≤–µ—Ä—Ö—É/—Å–Ω–∏–∑—É
    borderRadius: '5px',
    border: '1px solid #ccc',
    cursor: 'pointer',
    fontSize: '14px',
    width: '100%',
    boxSizing: 'border-box',
    transition: 'background-color 0.2s ease, transform 0.1s ease',
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ–ª–∂–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å" –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π
  const isSaveButtonActive = isDrawing || isEditingMode;

  return (
    <div style={sidebarStyle}>
      {/* –ö–Ω–æ–ø–∫–∞ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é –≤–Ω—É—Ç—Ä–∏ MapSidebar */}
      <button className="burger-menu-icon" onClick={toggleBurgerMenu} aria-label="–û—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é">
        {isBurgerMenuOpen ? '‚úï' : '‚ò∞'} {/* –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É */}
      </button>

      {/* –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é */}
      {isBurgerMenuOpen && (
        <div className="map-sidebar-dropdown-menu"> {/* –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —ç—Ç–æ–≥–æ –º–µ–Ω—é */}
          {/* –°—Å—ã–ª–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
          <a
            href="#"
            onClick={e => { e.preventDefault(); handleNavigate('/', 'home'); }}
            className={`map-menu-item ${activeSection === 'home' ? 'active' : ''}`}
          >
            üè† –ì–ª–∞–≤–Ω–∞—è
          </a>
          <a
            href="#"
            onClick={e => { e.preventDefault(); handleNavigate('/dashboard', 'map'); }}
            className={`map-menu-item ${activeSection === 'map' ? 'active' : ''}`}
          >
            üó∫Ô∏è –ö–∞—Ä—Ç–∞
          </a>
          <a
            href="#"
            onClick={e => { e.preventDefault(); handleNavigate('/chat', 'ai-chat'); }}
            className={`map-menu-item ${activeSection === 'ai-chat' ? 'active' : ''}`}
          >
            ü§ñ –ò–ò-—á–∞—Ç
          </a>
          <a
            href="#"
            onClick={e => { e.preventDefault(); handleNavigate('/earthdata', 'soil-data'); }}
            className={`map-menu-item ${activeSection === 'soil-data' ? 'active' : ''}`}
          >
            üå± –î–∞–Ω–Ω—ã–µ –ø–æ—á–≤—ã
          </a>
          
          {/* –ö–Ω–æ–ø–∫–∞ "–í—ã–π—Ç–∏" –≤ —ç—Ç–æ–º –º–µ–Ω—é */}
          <button onClick={handleLogout} className="map-menu-item map-logout">
            üö™ –í—ã–π—Ç–∏
          </button>
        </div>
      )}


      {/* –û—Å—Ç–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ MapSidebar –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */}
      <h2 style={{ color: '#333', marginBottom: '10px' }}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ–π</h2>
      <hr style={{ border: 'none', height: '1px', background: '#ccc', margin: '0' }} />

      {/* –°–µ–∫—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è */}
      <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>
        <button
          onClick={startDrawing}
          disabled={isDrawing || isEditingMode}
          style={{ ...buttonStyle, 
            backgroundColor: (isDrawing || isEditingMode) ? '#b3e0ff' : '#4CAF50', 
            color: 'white' 
          }}
        >
          {isDrawing ? '‚úèÔ∏è –†–∏—Å—É—é...' : '‚úèÔ∏è –ù–∞—á–∞—Ç—å —Ä–∏—Å–æ–≤–∞–Ω–∏–µ'}
        </button>

        <button
          onClick={() => {
            console.log('Stop and Save clicked. isDrawing:', isDrawing, 'isEditingMode:', isEditingMode);
            if (isDrawing) {
              if (window.getCurrentPath) {
                const currentPath = window.getCurrentPath();
                stopAndSaveDrawing(currentPath); 
                if (window.clearCurrentPath) window.clearCurrentPath(); 
              } else {
                stopDrawing();
              }
            } else if (isEditingMode) {
              handleStopAndSaveEdit();
            }
          }}
          disabled={!isSaveButtonActive}
          style={{ ...buttonStyle, 
            backgroundColor: isSaveButtonActive ? '#ff9800' : '#f0f0f0', 
            color: isSaveButtonActive ? 'white' : '#666' 
          }}
        >
          üíæ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        </button>

        <button
          onClick={clearAll}
          style={{ ...buttonStyle, backgroundColor: '#f44336', color: 'white' }}
        >
          üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–ª–∏–≥–æ–Ω—ã
        </button>
      </div>

      {/* –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê: –ú–æ–∏ –ø–æ–ª–∏–≥–æ–Ω—ã */}
      <button
        onClick={showMyPolygons} // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ showMyPolygons
        style={{
          ...buttonStyle,
          backgroundColor: '#007bff', // –°–∏–Ω–∏–π —Ü–≤–µ—Ç
          color: 'white',
          marginTop: '15px', // –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
        }}
      >
        üìÇ –ú–æ–∏ –ø–æ–ª–∏–≥–æ–Ω—ã
      </button>

      {/* –†–∞–∑–¥–µ–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª–∏–≥–æ–Ω–æ–≤ */}
      {polygons.length > 0 && (
        <div style={{ marginTop: '10px' }}>
          <h3 style={{ margin: '0 0 15px 0', color: '#333', fontSize: '18px' }}>
            üìê –ü–æ–ª–∏–≥–æ–Ω—ã ({polygons.length})
          </h3>
          <div style={{ maxHeight: '25vh', overflowY: 'auto', border: '1px solid #e0e0e0', borderRadius: '8px', padding: '10px' }}>
            {polygons.map((polygon, idx) => (
              <div
                key={polygon.id}
                style={{
                  marginBottom: '12px',
                  padding: '10px',
                  backgroundColor: selectedPolygon === polygon.id ? '#e3f2fd' : '#fff',
                  border: selectedPolygon === polygon.id ? '2px solid #2196f3' : '1px solid #e0e0e0',
                  borderRadius: '6px',
                  cursor: 'pointer',
                  boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
                }}
                onClick={() => setSelectedPolygon(polygon.id)}
              >
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '8px' }}>
                  <strong style={{ color: '#333', fontSize: '14px' }}>
                    –ü–æ–ª–∏–≥–æ–Ω #{idx + 1}
                  </strong>
                  <div style={{ display: 'flex', gap: '8px' }}>
                    <button
                      onClick={(e) => { e.stopPropagation(); deletePolygon(polygon.id); }}
                      style={{ padding: '4px 8px', backgroundColor: '#f44336', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer', fontSize: '11px' }}
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                    <button
                      onClick={(e) => { e.stopPropagation(); handleEditPolygon(polygon.id); }}
                      disabled={isEditingMode || isDrawing}
                      style={{ 
                        padding: '4px 8px', 
                        backgroundColor: (isEditingMode || isDrawing) ? '#cccccc' : '#ffc107', 
                        color: (isEditingMode || isDrawing) ? '#666666' : '#000', 
                        border: 'none', 
                        borderRadius: '4px', 
                        cursor: (isEditingMode || isDrawing) ? 'not-allowed' : 'pointer', 
                        fontSize: '11px' 
                      }}
                    >
                      ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                  </div>
                </div>
                <div 
                  style={{ 
                    fontSize: '12px', 
                    color: '#444', 
                    marginBottom: '8px' 
                  }}
                >
                  <div style={{ display: 'flex', gap: '15px', flexWrap: 'wrap', alignItems: 'center' }}>
                    <span>–¢–æ—á–µ–∫: {polygon.coordinates.length}</span>
                    <span>–ü–ª–æ—â–∞–¥—å: {formatArea(calculateArea(polygon.coordinates))}</span>
                    <div style={{ width: '18px', height: '18px', backgroundColor: polygon.color, borderRadius: '4px', border: '1px solid #ddd' }}></div>
                  </div>
                </div>
                {polygon.crop && (
                  <div 
                    style={{ 
                      fontSize: '12px', 
                      color: '#2e7d32', 
                      fontWeight: 'bold', 
                      backgroundColor: '#e8f5e8', 
                      padding: '5px 8px', 
                      borderRadius: '4px', 
                      marginTop: '8px', 
                      opacity: 1, 
                      transition: 'opacity 0.2s ease', 
                      display: 'block' 
                    }}
                  >
                    üåæ {polygon.crop}
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –†–∞–∑–¥–µ–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫—É–ª—å—Ç—É—Ä */}
      <div style={{ 
        backgroundColor: '#fff', 
        border: '1px solid #dee2e6', 
        borderRadius: '8px', 
        overflow: 'hidden', 
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
        marginTop: polygons.length > 0 ? '10px' : '0' 
      }}>
        <div style={{ backgroundColor: '#f8f9fa', padding: '12px', borderBottom: '1px solid #dee2e6', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <h4 style={{ margin: 0, color: '#333', fontSize: '16px' }}>
            üåæ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä
          </h4>
          <div style={{ display: 'flex', gap: '8px' }}>
            <button
              onClick={fetchCropsFromAPI}
              disabled={loadingCrops}
              style={{ padding: '6px 10px', backgroundColor: loadingCrops ? '#ccc' : '#17a2b8', color: 'white', border: 'none', borderRadius: '4px', cursor: loadingCrops ? 'not-allowed' : 'pointer', fontSize: '11px' }}
            >
              {loadingCrops ? '–ó–∞–≥—Ä—É–∂–∞—é...' : 'üîÑ'}
            </button>
            <button
              onClick={clearAllCrops}
              style={{ padding: '6px 10px', backgroundColor: '#dc3545', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer', fontSize: '11px' }}
            >
              üóëÔ∏è
            </button>
          </div>
        </div>

        {cropsError && (
          <div style={{ padding: '8px 12px', backgroundColor: '#f8d7da', color: '#721c24', fontSize: '11px' }}>
            ‚ö†Ô∏è {cropsError}
          </div>
        )}

        <div style={{ padding: '12px', maxHeight: '25vh', overflowY: 'auto' }}>
          {polygons.map((polygon, idx) => (
            <div
              key={polygon.id}
              style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '10px', padding: '8px', backgroundColor: selectedPolygon === polygon.id ? '#e3f2fd' : '#f8f9fa', borderRadius: '4px', border: '1px solid #e0e0e0' }}
            >
              <div style={{ width: '14px', height: '14px', backgroundColor: polygon.color, borderRadius: '3px', flexShrink: 0 }}></div>
              <div style={{ fontSize: '12px', fontWeight: 'bold', minWidth: '50px' }}>
                #{idx + 1}
              </div>
              <div style={{ fontSize: '10px', color: '#666', minWidth: '50px' }}>
                {formatArea(calculateArea(polygon.coordinates))}
              </div>
              <select
                value={polygon.crop || ''}
                onChange={(e) => updatePolygonCrop(polygon.id, e.target.value || null)}
                style={{ 
                  padding: '4px 8px', 
                  border: '1px solid #ced4da', 
                  borderRadius: '4px', 
                  backgroundColor: '#fff', 
                  fontSize: '11px', 
                  cursor: 'pointer', 
                  flex: 1, 
                  minWidth: '120px',
                  color: '#333'
                }}
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É</option>
                {crops.map((crop) => (
                  <option key={crop} value={crop} style={{ color: '#333' }}>
                    {crop}
                  </option>
                ))}
              </select>
            </div>
          ))}
        </div>

        {/* –°–≤–æ–¥–∫–∞ */}
        <div style={{ marginTop: '15px', padding: '10px', backgroundColor: '#f8f9fa', borderRadius: '6px', border: '1px solid #e9ecef', fontSize: '11px' }}>
          <div style={{ marginBottom: '8px', fontWeight: 'bold' }}>–°–≤–æ–¥–∫–∞:</div>
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '5px' }}>
            <div>–ü–æ–ª–∏–≥–æ–Ω–æ–≤: {polygons.length}</div>
            <div>–° –∫—É–ª—å—Ç—É—Ä–∞–º–∏: {polygons.filter((p) => p.crop).length}</div>
            <div style={{ gridColumn: '1 / -1' }}>
              –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å:{' '}
              {formatArea(polygons.reduce((total, p) => total + calculateArea(p.coordinates), 0))}
            </div>
          </div>
          {polygons.some((p) => p.crop) && (
            <div style={{ marginTop: '10px' }}>
              <div style={{ fontWeight: 'bold', marginBottom: '5px' }}>–ü–æ –∫—É–ª—å—Ç—É—Ä–∞–º:</div>
              <div style={{ display: 'flex', flexWrap: 'wrap', gap: '4px' }}>
                {Object.entries(
                  polygons.filter((p) => p.crop).reduce((acc, p) => {
                    const area = calculateArea(p.coordinates);
                    acc[p.crop] = (acc[p.crop] || 0) + area;
                    return acc;
                  }, {})
                ).map(([crop, area]) => (
                  <div key={crop} style={{ padding: '2px 6px', backgroundColor: '#e8f5e8', borderRadius: '3px', fontSize: '10px', color: '#2e7d32' }}>
                    {crop}: {formatArea(area)}
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
